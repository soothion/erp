<?php
namespace Bluebanner\Core\Order;
use MarketplaceWebService_Client;
use MarketplaceWebService_Model_GetReportListRequest;
use MarketplaceWebService_Model_GetReportRequest;
use XML2Array;
use Bluebanner\Core\Model\AmazonReport;
use MarketplaceWebService_Exception;

class AmazonService implements AmazonServiceInterface{
	public $config;
	public $service;
	public $wait = 1;//请求达到上限等待时间
	public $limit = 5;//请求失败多少次之后放弃

    public function __construct($config = null) {
	    $this->config = $config;
    	$this->service = new MarketplaceWebService_Client(
    		$this->config['access_key_id'],
    		$this->config['secret_access_key'], 
    		array(
    			'ServiceURL' => $this->config['service_url'],
    		    'ProxyHost' => null,
				'ProxyPort' => -1,
				'MaxErrorRetry' => 3),
    		$this->config['application_name'],
    		$this->config['application_version']
		);
    }

    /**
     * 获取订单列表
     * @return array 订单列表数组
     */
    public function getOrderList(){	
    	$reportList = $this->getReportList();
		$orderList=array();
		foreach ($reportList as $key => $value) {
			if($value=='error'){
				continue;
			}
			foreach ($this->parseReport($value) as $order) {
				$orderList[] = $order;
			}
		}
		return $orderList;
    }

    /**
     * 获取reportList
     * @return MarketplaceWebService_Model_GetReportListResponse MarketplaceWebService_Model_GetReportListResponse
     */
    public function getReportList(){
		$parameters = array (
		  'Merchant' => $this->config['merchant_id'],
	      'ReportTypeList'=>array(
      		'AvaliableFromDate'=>new \DateTime(gmdate("Y-m-d H:i:s", strtotime('-1 days')), new \DateTimeZone('UTC')),
	        'Type'=>array(
	           '_GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_',
	           '_GET_FLAT_FILE_ORDERS_DATA_'
	        ),
	      ),
		);

		$request = new MarketplaceWebService_Model_GetReportListRequest($parameters);
		$reportList = array();
		$response = $this->service->getReportList($request);
		foreach (array_reverse($response->getGetReportListResult()->getReportInfoList()) as $report){
			if($this->checkReport($report)){//检查report是否存在，不存在则插入
				continue;
			}
			$reportId = $report->getReportId();
			$reportList[] = $this->getReport($reportId);
		}
		return $reportList;
    }


    public function checkReport($report){
    	$attributes = array(
    		'report_id' => $report->getReportId(),
		    'report_type'=>$report->getReportType(),
		    'available_date' => $report->getAvailableDate()->format('Y-m-d H:m:s')
		    );
    	$result = AmazonReport::firstByAttributes($attributes);
    	if(!$result){
    		AmazonReport::create($attributes);
    	}
    	return $result;
    }
    /**
    * 获取目标report
    *
    * @param int $reportId
    * @return string $content
    * */
  	public function getReport($reportId) {
	    $params = array(
	      'Merchant'=>$this->config['merchant_id'],
	      'Report'=>@fopen('php://memory', 'rw+'),
	      'ReportId'=>$reportId
	    );
	    $request = new MarketplaceWebService_Model_GetReportRequest($params);
	    try 
	    {
	    	$response = $this->service->getReport($request);
	    } 
	    catch (MarketplaceWebService_Exception $e) {
	    	sleep($this->wait * 60);
	    	return $this->getReport($reportId);
	    }
    	
	    
		if ($response->isSetGetReportResult()) {
	     	$content = stream_get_contents($request->getReport());
	      	return $content;
	    } else {
	    	return 'error';
	    }

  	}


	/**
	 * 解析report为数组
	 *
	 * @param string $report 文本内容
	 * @return array
	 */
	public function parseReport($report)
	{
		$lines=explode("\n", $report);
		array_pop($lines);//排除最后一行空数据
		$header=array_shift($lines);
		$header=explode("\t", $header);
		$result=array();
		foreach($lines as $key=>$line){
			$line=explode("\t", $line);
			foreach($header as $k=>$v)
			{
				if(!isset($line[$k])){
					unset($result[$key]);
					break;
				}
				else{
					$result[$key][$v]=$line[$k];
				}	
			}
		}
		return $result;
	}
	

}